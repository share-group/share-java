/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.share.soa.thrift.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-31")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("id2", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEDIA_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaFrom", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public int id1; // required
  public short id2; // required
  public String content; // required
  public String mediaFrom; // required
  public String author; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID1((short)1, "id1"),
    ID2((short)2, "id2"),
    CONTENT((short)3, "content"),
    MEDIA_FROM((short)4, "mediaFrom"),
    AUTHOR((short)5, "author");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID1
          return ID1;
        case 2: // ID2
          return ID2;
        case 3: // CONTENT
          return CONTENT;
        case 4: // MEDIA_FROM
          return MEDIA_FROM;
        case 5: // AUTHOR
          return AUTHOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID1_ISSET_ID = 0;
  private static final int __ID2_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID2, new org.apache.thrift.meta_data.FieldMetaData("id2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_FROM, new org.apache.thrift.meta_data.FieldMetaData("mediaFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    int id1,
    short id2,
    String content,
    String mediaFrom,
    String author)
  {
    this();
    this.id1 = id1;
    setId1IsSet(true);
    this.id2 = id2;
    setId2IsSet(true);
    this.content = content;
    this.mediaFrom = mediaFrom;
    this.author = author;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id1 = other.id1;
    this.id2 = other.id2;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetMediaFrom()) {
      this.mediaFrom = other.mediaFrom;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setId1IsSet(false);
    this.id1 = 0;
    setId2IsSet(false);
    this.id2 = 0;
    this.content = null;
    this.mediaFrom = null;
    this.author = null;
  }

  public int getId1() {
    return this.id1;
  }

  public User setId1(int id1) {
    this.id1 = id1;
    setId1IsSet(true);
    return this;
  }

  public void unsetId1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
  }

  /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
  public boolean isSetId1() {
    return EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
  }

  public void setId1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
  }

  public short getId2() {
    return this.id2;
  }

  public User setId2(short id2) {
    this.id2 = id2;
    setId2IsSet(true);
    return this;
  }

  public void unsetId2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID2_ISSET_ID);
  }

  /** Returns true if field id2 is set (has been assigned a value) and false otherwise */
  public boolean isSetId2() {
    return EncodingUtils.testBit(__isset_bitfield, __ID2_ISSET_ID);
  }

  public void setId2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID2_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public User setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getMediaFrom() {
    return this.mediaFrom;
  }

  public User setMediaFrom(String mediaFrom) {
    this.mediaFrom = mediaFrom;
    return this;
  }

  public void unsetMediaFrom() {
    this.mediaFrom = null;
  }

  /** Returns true if field mediaFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaFrom() {
    return this.mediaFrom != null;
  }

  public void setMediaFromIsSet(boolean value) {
    if (!value) {
      this.mediaFrom = null;
    }
  }

  public String getAuthor() {
    return this.author;
  }

  public User setAuthor(String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID1:
      if (value == null) {
        unsetId1();
      } else {
        setId1((Integer)value);
      }
      break;

    case ID2:
      if (value == null) {
        unsetId2();
      } else {
        setId2((Short)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case MEDIA_FROM:
      if (value == null) {
        unsetMediaFrom();
      } else {
        setMediaFrom((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID1:
      return getId1();

    case ID2:
      return getId2();

    case CONTENT:
      return getContent();

    case MEDIA_FROM:
      return getMediaFrom();

    case AUTHOR:
      return getAuthor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID1:
      return isSetId1();
    case ID2:
      return isSetId2();
    case CONTENT:
      return isSetContent();
    case MEDIA_FROM:
      return isSetMediaFrom();
    case AUTHOR:
      return isSetAuthor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_id1 = true;
    boolean that_present_id1 = true;
    if (this_present_id1 || that_present_id1) {
      if (!(this_present_id1 && that_present_id1))
        return false;
      if (this.id1 != that.id1)
        return false;
    }

    boolean this_present_id2 = true;
    boolean that_present_id2 = true;
    if (this_present_id2 || that_present_id2) {
      if (!(this_present_id2 && that_present_id2))
        return false;
      if (this.id2 != that.id2)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_mediaFrom = true && this.isSetMediaFrom();
    boolean that_present_mediaFrom = true && that.isSetMediaFrom();
    if (this_present_mediaFrom || that_present_mediaFrom) {
      if (!(this_present_mediaFrom && that_present_mediaFrom))
        return false;
      if (!this.mediaFrom.equals(that.mediaFrom))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id1 = true;
    list.add(present_id1);
    if (present_id1)
      list.add(id1);

    boolean present_id2 = true;
    list.add(present_id2);
    if (present_id2)
      list.add(id2);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_mediaFrom = true && (isSetMediaFrom());
    list.add(present_mediaFrom);
    if (present_mediaFrom)
      list.add(mediaFrom);

    boolean present_author = true && (isSetAuthor());
    list.add(present_author);
    if (present_author)
      list.add(author);

    return list.hashCode();
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId2()).compareTo(other.isSetId2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id2, other.id2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaFrom()).compareTo(other.isSetMediaFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaFrom, other.mediaFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("id1:");
    sb.append(this.id1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id2:");
    sb.append(this.id2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaFrom:");
    if (this.mediaFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id1 = iprot.readI32();
              struct.setId1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID2
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.id2 = iprot.readI16();
              struct.setId2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEDIA_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaFrom = iprot.readString();
              struct.setMediaFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID1_FIELD_DESC);
      oprot.writeI32(struct.id1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID2_FIELD_DESC);
      oprot.writeI16(struct.id2);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.mediaFrom != null) {
        oprot.writeFieldBegin(MEDIA_FROM_FIELD_DESC);
        oprot.writeString(struct.mediaFrom);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.author);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId1()) {
        optionals.set(0);
      }
      if (struct.isSetId2()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetMediaFrom()) {
        optionals.set(3);
      }
      if (struct.isSetAuthor()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId1()) {
        oprot.writeI32(struct.id1);
      }
      if (struct.isSetId2()) {
        oprot.writeI16(struct.id2);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetMediaFrom()) {
        oprot.writeString(struct.mediaFrom);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id1 = iprot.readI32();
        struct.setId1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.id2 = iprot.readI16();
        struct.setId2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mediaFrom = iprot.readString();
        struct.setMediaFromIsSet(true);
      }
      if (incoming.get(4)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
    }
  }

}

